{"version":3,"file":"main.js","sources":["xml.ts","word/oxml.ts","word/relationships.ts","word/content-types.ts","word/styles.ts","word/numbering.ts","word/resource-types.ts","utils.ts","word/word-document.ts","document-json-meta.ts","markdown/document-references.ts","markdown/markdown.ts","word-templates/paragraph-template-substitution.ts","word-templates/inline-template-substitution.ts","generator/generator.ts","main.ts"],"sourcesContent":["import {XMLBuilder, XMLParser} from \"fast-xml-parser\";\n\nexport const keys = {\n    comment: \"__comment__\",\n    text: \"__text__\",\n    attributes: \":@\",\n    document: \"__document__\"\n}\n\nexport const parser = new XMLParser({\n    ignoreAttributes: false,\n    alwaysCreateTextNode: true,\n    attributeNamePrefix: \"\",\n    preserveOrder: true,\n    trimValues: false,\n    commentPropName: keys.comment,\n    textNodeName: keys.text\n})\n\nexport const builder = new XMLBuilder({\n    ignoreAttributes: false,\n    attributeNamePrefix: \"\",\n    preserveOrder: true,\n    commentPropName: keys.comment,\n    textNodeName: keys.text\n})\n\nfunction checkFilter(filter: Filter, node: Node) {\n    if (!filter) return true\n    if (typeof filter === \"string\") {\n        return node.getTagName() === filter\n    }\n    return filter(node)\n}\n\nexport type Filter = string | ((node: Node) => boolean) | null\nexport type VisitCallbackSync<PathType> = (node: Node, path: PathType) => (boolean | void)\nexport type VisitCallbackAsync<PathType> = (node: Node, path: PathType) => Promise<boolean | void>\nexport type VisitCallback<PathType> = VisitCallbackSync<PathType> | VisitCallbackAsync<PathType>\nexport type Path = number[]\n\nfunction getVisitArgs<PathType>(args: any[]) {\n    let filter: Filter = null\n    let callback: VisitCallback<PathType> = args[0]\n    let startPosition: PathType | undefined = args[1]\n\n    if (typeof args[1] === \"function\") {\n        filter = args[0]\n        callback = args[1]\n        startPosition = args[2]\n    }\n\n    return {\n        filter: filter,\n        callback: callback,\n        startPosition: startPosition\n    }\n}\n\nexport class Node {\n    private element: any\n    private tempDestroyed: boolean = false\n\n    constructor(element: any) {\n        if (Array.isArray(element)) {\n            throw new Error(\"XML.Node must be constructed from the xml object, not its children list\")\n        }\n        this.element = element\n    }\n\n    getTagName() {\n        this.checkTemporary()\n        for (let key of Object.getOwnPropertyNames(this.element)) {\n            // Be safe from prototype pollution\n            if (key === \"__proto__\" || key === keys.attributes) continue\n            return key\n        }\n        return null\n    }\n\n    pushChild(child: Node) {\n        this.checkTemporary()\n\n        let children = this.getRawChildren()\n        if (children === null) {\n            throw new Error(\"Cannot call pushChild on \" + this.getTagName() + \" element\")\n        }\n\n        children.push(child.raw())\n        return this\n    }\n\n    unshiftChild(child: Node) {\n        this.checkTemporary()\n\n        let children = this.getRawChildren()\n        if (children === null) {\n            throw new Error(\"Cannot call unshiftChild on \" + this.getTagName() + \" element\")\n        }\n\n        children.unshift(child.raw())\n        return this\n    }\n\n    getChildren(filter: Filter | null = null): Node[] {\n        this.checkTemporary()\n\n        let result = []\n        this.visitChildren(filter, (child) => {\n            result.push(child.shallowCopy())\n        })\n        return result\n    }\n\n    getChild(filter: Filter | null): Node | null\n    getChild(path: Path): Node | null\n    getChild(arg: Filter | Path | null = null): Node | null {\n        this.checkTemporary()\n\n        if (Array.isArray(arg)) {\n            let path = arg as Path\n            if (path.length === 0) {\n                return this\n            }\n\n            let result = new Node(this.element)\n\n            for (let i = 0; i < path.length; i++) {\n                if (!result.element) return null\n                let tagName = result.getTagName()\n                let pathComponent = path[i]\n                let children = result.element[tagName]\n\n                if (pathComponent < 0) {\n                    result.element = children[children.length + pathComponent]\n                } else {\n                    result.element = children[pathComponent]\n                }\n            }\n\n            if (!result.element) return null\n            return result\n        } else {\n            let filter = arg as Filter\n            let result = null\n            this.visitChildren(filter, (child) => {\n                if (result) {\n                    throw new Error(\"Element have multiple children matching the given filter\")\n                }\n                result = child.shallowCopy()\n            })\n            return result\n        }\n    }\n\n    visitChildren(filter: Filter, callback: VisitCallback<number>, startIndex?: number): void\n    visitChildren(callback: VisitCallback<number>, startIndex?: number): void\n    visitChildren(...args: any[]) {\n        this.checkTemporary()\n\n        let {\n            filter,\n            callback,\n            startPosition\n        } = getVisitArgs<number>(args)\n\n        let tagName = this.getTagName()\n        if (!Array.isArray(this.element[tagName])) {\n            return\n        }\n\n        let index = startPosition ?? 0\n\n        let tmpNode = new Node(null)\n        for (let child of this.element[tagName]) {\n            tmpNode.element = child\n            if (checkFilter(filter, tmpNode)) {\n                if (callback(tmpNode, index) === false) {\n                    break\n                }\n            }\n            index++\n        }\n\n        tmpNode.markDestroyed()\n    }\n\n    visitSubtree(filter: Filter, callback: VisitCallback<Path>, startPath?: Path): void\n    visitSubtree(callback: VisitCallback<Path>, startPath?: Path): void\n    visitSubtree(...args: any[]) {\n        this.checkTemporary()\n\n        let {\n            filter,\n            callback,\n            startPosition\n        } = getVisitArgs<Path>(args)\n\n        let tmpNode = new Node(null)\n        let startPath = startPosition ?? []\n        let startDepth = 0\n\n        let path = []\n\n        const walk = (node: Node) => {\n            let tagName = node.getTagName()\n            let children = node.element[tagName]\n\n            if (!Array.isArray(children)) {\n                return\n            }\n\n            let depth = path.length\n            let startIndex = 0\n            if (depth < startDepth && startPath.length) {\n                startIndex = startPath[startPath.length]\n                startDepth = depth\n            }\n\n            for (let index = startIndex; index < children.length; index++) {\n                path.push(index)\n                tmpNode.element = children[index]\n                let filterPass = checkFilter(filter, tmpNode)\n                let goDeeper = true\n\n                if (filterPass) {\n                    goDeeper = callback(tmpNode, path) === true\n                }\n\n                if (goDeeper) {\n                    walk(tmpNode)\n                }\n\n                // Handle path modification\n                index = path[path.length - 1]\n                path.pop()\n            }\n        }\n\n        walk(this)\n\n        tmpNode.markDestroyed()\n    }\n\n    removeChild(path: Path) {\n        if(path.length === 0) {\n            throw new Error(\"Cannot call removeChild with empty path\")\n        }\n\n        let topIndex = path.pop()\n\n        let child = this.getChild(path)\n        let childChildren = child.getRawChildren()\n\n        if (childChildren === null) {\n            throw new Error(\"Cannot call removeChild for \" + child.getTagName() + \" element\")\n        }\n\n        childChildren.splice(topIndex, 1)\n\n        path.push(topIndex)\n    }\n\n    removeChildren(filter: Filter = null) {\n        this.checkTemporary()\n        let children = this.getRawChildren()\n\n        if (children === null) {\n            throw new Error(\"Cannot call removeChildren on \" + this.getTagName() + \" element\")\n        }\n\n        let node = new Node(null)\n\n        for (let i = 0; i < children.length; i++) {\n            node.element = children[i]\n            if (checkFilter(filter, node)) {\n                children.splice(i, 1)\n                i--\n            }\n        }\n\n        node.markDestroyed()\n    }\n\n    isTextNode() {\n        this.checkTemporary()\n\n        return this.getTagName() == keys.text\n    }\n\n    isCommentNode() {\n        this.checkTemporary()\n\n        return this.getTagName() == keys.comment\n    }\n\n    getText(): string {\n        this.checkTemporary()\n\n        if (!this.isTextNode()) {\n            throw new Error(\"getText() is called on \" + this.getTagName() + \" element\")\n        }\n        return String(this.element[keys.text])\n    }\n\n    setText(text: string) {\n        this.checkTemporary()\n\n        if (!this.isTextNode()) {\n            throw new Error(\"setText() is called on \" + this.getTagName() + \" element\")\n        }\n        this.element[keys.text] = text\n    }\n\n    getComment(): string {\n        this.checkTemporary()\n\n        if (!this.isCommentNode()) {\n            throw new Error(\"getComment() is called on \" + this.getTagName() + \" element\")\n        }\n\n        let textChild = this.getChild(keys.text)\n        return textChild.getText()\n    }\n\n    static build(tagName: string) {\n        let element = {}\n        element[tagName] = []\n        return new Node(element)\n    }\n\n    static createDocument(args: { [key: string]: string } = {}) {\n        args = Object.assign({\n            version: \"1.0\",\n            encoding: \"UTF-8\",\n            standalone: \"yes\"\n        }, args)\n        let document = this.build(keys.document)\n        document.appendChildren([\n            Node.build(\"?xml\")\n                .setAttrs(args)\n                .appendChildren([\n                    Node.buildTextNode(\"\")\n                ])\n        ])\n        return document\n    }\n\n    static buildTextNode(text: string) {\n        let element = {}\n        element[keys.text] = text\n        return new Node(element)\n    }\n\n    setAttr(attribute: string, value: string) {\n        this.checkTemporary()\n\n        if (!this.element[keys.attributes]) {\n            this.element[keys.attributes] = {}\n        }\n\n        this.element[keys.attributes][attribute] = value\n        return this\n    }\n\n    setAttrs(attributes: { [key: string]: string }) {\n        this.checkTemporary()\n\n        this.element[keys.attributes] = attributes\n        return this\n    }\n\n    getAttrs() {\n        if (!this.element[keys.attributes]) {\n            this.element[keys.attributes] = {}\n        }\n        return this.element[keys.attributes]\n    }\n\n    getAttr(attribute: string): string | null {\n        this.checkTemporary()\n\n        let attrs = this.getAttrs()\n        let attr = attrs[attribute]\n        if(attr === undefined) return null\n        return String(attr)\n    }\n\n    clearChildren(path: Path = []) {\n        this.checkTemporary()\n\n        let parent = this.getChild(path)\n        parent.element[parent.getTagName()] = []\n        return this\n    }\n\n    insertChildren(children: Node[], path: Path) {\n        this.checkTemporary()\n\n        if(path.length === 0) {\n            throw new Error(\"Cannot call insertChildren with empty path\")\n        }\n\n        let insertIndex = path.pop()\n        let parent = this.getChild(path)\n        path.push(insertIndex)\n\n        let lastChildren = parent.getRawChildren()\n\n        if(lastChildren === null) {\n            throw new Error(\"Cannot call insertChildren for \" + parent.getTagName() + \" element\")\n        }\n\n        if (insertIndex < 0) {\n            insertIndex = children.length + insertIndex + 1\n        }\n\n        lastChildren.splice(insertIndex, 0, ...children.map(child => child.raw()))\n        return this\n    }\n\n    appendChildren(children: Node[], path: Path = []) {\n        path.push(-1)\n        this.insertChildren(children, path)\n        path.pop()\n        return this\n    }\n\n    unshiftChildren(children: Node[], path: Path = []) {\n        path.push(0)\n        this.insertChildren(children, path)\n        path.pop()\n        return this\n    }\n\n    assign(another: Node) {\n        this.checkTemporary()\n\n        if (this === another) {\n            return\n        }\n\n        if (this.element) {\n            this.element[this.getTagName()] = undefined\n        } else {\n            this.element = {}\n        }\n\n        this.element[another.getTagName()] = JSON.parse(JSON.stringify(another.raw()[another.getTagName()]))\n\n        if (another.raw()[keys.attributes]) {\n            this.element[keys.attributes] = JSON.parse(JSON.stringify(another.raw()[keys.attributes]))\n        } else {\n            this.element[keys.attributes] = {}\n        }\n\n        return this\n    }\n\n    static fromXmlString(str: string) {\n        let object = parser.parse(str)\n        let wrapped = {}\n        wrapped[keys.document] = object\n        return new Node(wrapped)\n    }\n\n    toXmlString() {\n        this.checkTemporary()\n        if (this.getTagName() === keys.document) {\n            return builder.build(this.element[keys.document])\n        } else {\n            return builder.build([this.element])\n        }\n    }\n\n    raw() {\n        this.checkTemporary()\n        return this.element\n    }\n\n    private checkTemporary() {\n        if (this.tempDestroyed) {\n            throw new Error(\"Method access to an outdated temporary Node. Make sure to call .shallowCopy() on temporary \" +\n                \"nodes before accessing them outside your visitChildren/visitSubtree body scope\")\n        }\n    }\n\n    private markDestroyed() {\n        this.checkTemporary()\n        // From now on, the checkTemporary method will throw\n        this.tempDestroyed = true\n    }\n\n    getRawContents(): any[] | string | number {\n        this.checkTemporary()\n        return this.element[this.getTagName()]\n    }\n\n    getRawChildren(): any[] | null {\n        this.checkTemporary()\n        let contents = this.getRawContents()\n        if(Array.isArray(contents)) {\n            return contents\n        }\n        return null\n    }\n\n    shallowCopy() {\n        this.checkTemporary()\n\n        return new Node(this.element)\n    }\n\n    deepCopy() {\n        this.checkTemporary()\n        return new Node(null).assign(this)\n    }\n\n    isLeaf() {\n        this.checkTemporary()\n        return this.getRawChildren() === null\n    }\n\n    getChildrenCount() {\n        return this.getRawChildren()?.length ?? 0\n    }\n}\n\nexport class Serializable {\n    readXmlString(xmlString: string): this {\n        this.readXml(Node.fromXmlString(xmlString))\n        return this\n    }\n\n    readXml(xml: Node): this {\n        throw new Error(\"readXml is not implemented\")\n        return this\n    }\n\n    toXmlString() {\n        return this.toXml().toXmlString()\n    }\n\n    toXml(): Node {\n        throw new Error(\"toXml is not implemented\")\n    }\n}\n\nexport class Wrapper extends Serializable {\n    node: Node | null = null\n\n    readXml(xml: Node): this {\n        this.node = xml\n        return this\n    }\n\n    toXml() {\n        return this.node\n    }\n}\n\nexport function getNamespace(name: string) {\n    let parts = name.split(\":\")\n    if(parts.length >= 2) {\n        return parts[0]\n    }\n    return null\n}\n\nexport function* getUsedNames(tag: Node) {\n    let tagName = tag.getTagName()\n    yield tagName\n\n    let attributes = tag.getAttrs()\n\n    for(let key of Object.getOwnPropertyNames(attributes)) {\n        // Be safe from prototype pollution\n        if(key === \"__proto__\") continue\n        yield key\n    }\n}\n\nexport function getTextContents(tag: Node): string {\n    let result = \"\"\n\n    tag.visitSubtree(keys.text, (node) => {\n        result += node.getText()\n    })\n\n    return result\n}","import path from \"path\";\nimport * as XML from \"src/xml\";\n\nexport const wordXmlns = new Map<string, string>([\n    [\"wpc\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\"],\n    [\"mc\", \"http://schemas.openxmlformats.org/markup-compatibility/2006\"],\n    [\"o\", \"urn:schemas-microsoft-com:office:office\"],\n    [\"r\", \"http://schemas.openxmlformats.org/officeDocument/2006/relationships\"],\n    [\"m\", \"http://schemas.openxmlformats.org/officeDocument/2006/math\"],\n    [\"v\", \"urn:schemas-microsoft-com:vml\"],\n    [\"wp14\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\"],\n    [\"wp\", \"http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\"],\n    [\"w10\", \"urn:schemas-microsoft-com:office:word\"],\n    [\"w\", \"http://schemas.openxmlformats.org/wordprocessingml/2006/main\"],\n    [\"w14\", \"http://schemas.microsoft.com/office/word/2010/wordml\"],\n    [\"w15\", \"http://schemas.microsoft.com/office/word/2012/wordml\"],\n    [\"wpg\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\"],\n    [\"wpi\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingInk\"],\n    [\"wne\", \"http://schemas.microsoft.com/office/word/2006/wordml\"],\n    [\"wps\", \"http://schemas.microsoft.com/office/word/2010/wordprocessingShape\"],\n    [\"pic\", \"http://schemas.openxmlformats.org/drawingml/2006/picture\"],\n    [\"a\", \"http://schemas.openxmlformats.org/drawingml/2006/main\"],\n])\n\nexport const wordXmlnsIgnorable = new Set<string>([\"wp14\", \"w14\", \"w15\"])\n\nexport function getProperXmlnsForDocument(document: XML.Node) {\n    let result = {}\n    let ignorable = new Set<string>()\n\n    document.visitSubtree((child) => {\n        for(let name of XML.getUsedNames(child)) {\n            let namespace = XML.getNamespace(name)\n\n            if (!namespace || !wordXmlns.has(namespace)) {\n                continue\n            }\n\n            result[\"xmlns:\" + namespace] = wordXmlns.get(namespace)\n\n            if (wordXmlnsIgnorable.has(namespace)) {\n                ignorable.add(namespace)\n            }\n        }\n\n        return true\n    })\n\n    if(ignorable.size) {\n        result[\"xmlns:mc\"] = wordXmlns.get(\"mc\")\n        result[\"mc:Ignorable\"] = Array.from(ignorable).join(\" \")\n    }\n\n    return result\n}\n\nexport function buildParagraphWithStyle(style: string): XML.Node {\n    return XML.Node.build(\"w:p\").appendChildren([\n        XML.Node.build(\"w:pPr\").appendChildren([\n            XML.Node.build(\"w:pStyle\").setAttr(\"w:val\", style)\n        ])\n    ])\n}\n\nexport function buildNumPr(ilvl: string, numId: string): XML.Node {\n    // <w:numPr>\n    //    <w:ilvl w:val=\"<ilvl>\"/>\n    //    <w:numId w:val=\"<numId>\"/>\n    // </w:numPr>\n\n    return XML.Node.build(\"w:numPr\").appendChildren([\n        XML.Node.build(\"w:ilvl\").setAttr(\"w:val\", \"0\"),\n        XML.Node.build(\"w:numId\").setAttr(\"w:val\", numId),\n    ])\n}\n\nexport function buildSuperscriptTextStyle(): XML.Node {\n    return XML.Node.build(\"w:vertAlign\").setAttr(\"w:val\", \"superscript\")\n}\n\nexport function buildLineBreak() {\n    return XML.Node.build(\"w:br\")\n}\n\nexport function buildTextTag(text: string): XML.Node {\n    return XML.Node.build(\"w:t\")\n        .setAttr(\"xml:space\", \"preserve\")\n        .appendChildren([\n            XML.Node.buildTextNode(text)\n        ])\n}\n\nexport function buildRawTag(text: string, styles?: XML.Node[]): XML.Node {\n    let result = XML.Node.build(\"w:r\")\n\n    if(styles) {\n        result.pushChild(XML.Node.build(\"w:rPr\").appendChildren(styles))\n    }\n\n    result.pushChild(buildTextTag(text))\n\n    return result\n}\n\nexport function getChildVal(node: XML.Node, tag: string) {\n    let child = node.getChild(tag)\n    if(child) return child.getAttr(\"w:val\")\n    return null\n}\n\nexport function setChildVal(node: XML.Node, tag: string, value: string | null) {\n    if(value === null) {\n        node.removeChildren(tag)\n    } else {\n        let basedOnTag = node.getChild(tag)\n        if(basedOnTag) basedOnTag.setAttr(\"w:val\", value)\n        else node.appendChildren([\n            XML.Node.build(tag).setAttr(\"w:val\", value)\n        ])\n    }\n}\n\nexport function fixXmlns(document: XML.Node, rootTag: string) {\n    document.getChild(rootTag).setAttrs(getProperXmlnsForDocument(document))\n}\n\nexport function normalizePath(pathString: string) {\n    pathString = path.posix.normalize(pathString)\n    if(!pathString.startsWith(\"/\")) {\n        pathString = \"/\" + pathString\n    }\n    return pathString\n}\n\nexport function getRelsPath(resourcePath: string) {\n    let basename = path.basename(resourcePath)\n    let dirname = path.dirname(resourcePath)\n\n    return normalizePath(dirname + \"/_rels/\" + basename + \".rels\")\n}","import * as XML from 'src/xml.js'\n\nexport interface Relation {\n    id: string\n    type: string\n    target: string\n}\n\nexport default class Relationships extends XML.Serializable {\n    relations: Map<string, Relation> = new Map()\n\n    readXml(xml: XML.Node) {\n        this.relations = new Map()\n\n        xml.getChild(\"Relationships\")?.visitChildren(\"Relationship\", (child) => {\n            let id = child.getAttr(\"Id\")\n            let type = child.getAttr(\"Type\")\n            let target = child.getAttr(\"Target\")\n\n            if (id !== undefined && type !== undefined && target !== undefined) {\n                this.addRelation({\n                    id: id,\n                    type: type,\n                    target: target\n                })\n            }\n        })\n\n        return this\n    }\n\n    toXml() {\n        let relations = Array.from(this.relations.values())\n\n        return XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"Relationships\")\n                .setAttr(\"xmlns\", \"http://schemas.openxmlformats.org/package/2006/relationships\")\n                .appendChildren(relations.map((relation) => {\n                    return XML.Node.build(\"Relationship\")\n                        .setAttr(\"Id\", relation.id)\n                        .setAttr(\"Type\", relation.type)\n                        .setAttr(\"Target\", relation.target)\n                }))\n        ])\n    }\n\n    getUnusedId() {\n        let prefix = \"rId\"\n        let index = 1\n\n        while (this.relations.has(prefix + index)) {\n            index++\n        }\n\n        return prefix + index\n    }\n\n    addRelation(relation: Relation) {\n        this.relations.set(relation.id, relation)\n    }\n\n    getRelForTarget(target: string) {\n        for(let rel of this.relations.values()) {\n            if(rel.target === target) {\n                return rel\n            }\n        }\n    }\n}","import * as XML from 'src/xml.js'\nimport * as OXML from 'src/word/oxml'\nimport path from \"path\";\n\nexport interface ContentTypeDefault {\n    extension: string,\n    contentType: string\n}\n\nexport interface ContentTypeOverride {\n    partName: string\n    contentType: string\n}\n\nexport default class ContentTypes extends XML.Serializable {\n    defaults: ContentTypeDefault[]\n    overrides: ContentTypeOverride[]\n\n    readXml(xml: XML.Node) {\n        this.defaults = []\n        this.overrides = []\n\n        let types = xml.getChild(\"Types\")\n\n        types?.visitChildren(\"Default\", (child) => {\n            let extension = child.getAttr(\"Extension\")\n            let contentType = child.getAttr(\"ContentType\")\n\n            if (extension !== undefined && contentType !== undefined) {\n                this.defaults.push({\n                    extension: extension,\n                    contentType: contentType\n                })\n            }\n        })\n\n        types?.visitChildren(\"Override\", (child) => {\n            let partName = child.getAttr(\"PartName\")\n            let contentType = child.getAttr(\"ContentType\")\n\n            if (partName !== undefined && contentType !== undefined) {\n                this.overrides.push({\n                    partName: partName,\n                    contentType: contentType\n                })\n            }\n        })\n\n        return this\n    }\n\n    toXml() {\n        return XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"Types\")\n                .setAttr(\"xmlns\", \"http://schemas.openxmlformats.org/package/2006/content-types\")\n                .appendChildren(this.defaults.map((def) => {\n                    return XML.Node.build(\"Default\")\n                        .setAttr(\"Extension\", def.extension)\n                        .setAttr(\"ContentType\", def.contentType)\n                }))\n                .appendChildren(this.overrides.map((override) => {\n                    return XML.Node.build(\"Override\")\n                        .setAttr(\"PartName\", override.partName)\n                        .setAttr(\"ContentType\", override.contentType)\n                }))\n        ])\n    }\n\n    getContentTypeForExt(ext: string) {\n        for(let def of this.defaults) {\n            if(def.extension === ext) return def.contentType\n        }\n        return null\n    }\n\n    getOverrideForPartName(partName: string) {\n        for(let override of this.overrides) {\n            if(override.partName === partName) return override.contentType\n        }\n        return null\n    }\n\n    getContentTypeForPath(pathString: string) {\n        pathString = OXML.normalizePath(pathString)\n        let overrideContentType = this.getOverrideForPartName(pathString)\n\n        if(overrideContentType !== null) {\n            return overrideContentType\n        }\n\n        const extension = path.extname(pathString).slice(1)\n        return this.getContentTypeForExt(extension)\n    }\n\n    join(other: ContentTypes) {\n        for(let otherDef of other.defaults) {\n            if(this.getContentTypeForExt(otherDef.extension) === null) {\n                this.defaults.push({\n                    ...otherDef\n                })\n            }\n        }\n\n        for(let otherOverride of other.overrides) {\n            if(this.getOverrideForPartName(otherOverride.partName) === null) {\n                this.overrides.push({\n                    ...otherOverride\n                })\n            }\n        }\n    }\n}","import * as XML from 'src/xml.js'\nimport * as OXML from 'src/word/oxml'\nimport Relationships from \"./relationships\";\n\nexport class Style extends XML.Wrapper {\n    getBaseStyle() {\n        return OXML.getChildVal(this.node, \"w:basedOn\")\n    }\n\n    getLinkedStyle() {\n        return OXML.getChildVal(this.node, \"w:link\")\n    }\n\n    getNextStyle() {\n        return OXML.getChildVal(this.node, \"w:link\")\n    }\n\n    getName() {\n        return OXML.getChildVal(this.node, \"w:name\")\n    }\n\n    getId() {\n        return this.node.getAttr(\"w:styleId\")\n    }\n\n    setBaseStyle(style: string | null) {\n        OXML.setChildVal(this.node, \"w:basedOn\", style)\n    }\n\n    setLinkedStyle(style: string | null) {\n        OXML.setChildVal(this.node, \"w:link\", style)\n    }\n\n    setNextStyle(style: string | null) {\n        OXML.setChildVal(this.node, \"w:next\", style)\n    }\n\n    setName(name: string) {\n        OXML.setChildVal(this.node, \"w:name\", name)\n    }\n\n    setId(id: string) {\n        this.node.setAttr(\"w:styleId\", id)\n    }\n}\n\nexport class LatentStyles extends XML.Wrapper {\n    readOrCreate(node: XML.Node): this {\n        if(!node) {\n            node = XML.Node.build(\"w:latentStyles\")\n        }\n        return this.readXml(node)\n    }\n\n    getLsdExceptions() {\n        let result = new Map()\n        this.node.visitChildren(\"w:lsdException\", (child) => {\n            let lsdException = new LSDException().readXml(child.shallowCopy())\n            result.set(lsdException.name, lsdException)\n        })\n    }\n}\n\nexport class DocDefaults extends XML.Wrapper {\n    readOrCreate(node: XML.Node): this {\n        if(!node) {\n            node = XML.Node.build(\"w:docDefaults\")\n        }\n        return this.readXml(node)\n    }\n}\n\nexport class LSDException extends XML.Wrapper {\n    name: string\n\n    readXml(node: XML.Node) {\n        this.name = node.getAttr(\"w:name\")\n        return this\n    }\n\n    setName(name: string) {\n        this.name = name\n        this.node.setAttr(\"w:name\", name)\n        return this\n    }\n}\n\nexport default class Styles extends XML.Serializable {\n    styles: Map<string, Style> = new Map()\n    docDefaults: DocDefaults | null = null\n    latentStyles: LatentStyles | null = null\n    rels: Relationships\n\n    readXml(xml: XML.Node) {\n        this.styles = new Map()\n\n        let styles = xml.getChild(\"w:styles\")\n\n        this.latentStyles = new LatentStyles().readOrCreate(styles.getChild(\"w:latentStyles\"))\n        this.docDefaults = new DocDefaults().readOrCreate(styles.getChild(\"w:docDefaults\"))\n\n        styles?.visitChildren(\"w:style\", (child) => {\n            let style = new Style().readXml(child.shallowCopy())\n\n            this.styles.set(style.getId(), style)\n        })\n\n        return this\n    }\n\n    toXml() {\n        let styles = Array.from(this.styles.values())\n\n        let result = XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"w:styles\")\n                .appendChildren([\n                    this.docDefaults.node.deepCopy(),\n                    this.latentStyles.node.deepCopy()\n                ])\n                .appendChildren(styles.map((style) => {\n                    return style.node.deepCopy()\n                }))\n        ])\n\n        result.getChild(\"w:styles\").setAttrs(OXML.getProperXmlnsForDocument(result))\n\n        return result\n    }\n\n    removeStyle(style: Style) {\n        this.styles.delete(style.getId())\n    }\n\n    addStyle(style: Style) {\n        this.styles.set(style.getId(), style)\n    }\n\n    getStyleByName(name: string) {\n        for(let [id, style] of this.styles) {\n            if(style.getName() === name) return style\n        }\n        return null\n    }\n}","import * as XML from \"src/xml\";\nimport * as OXML from \"src/word/oxml\";\n\nfunction getNodeLevel(node: XML.Node, tagName: string, index: number) {\n    let result: XML.Node | null\n\n    let strIndex = String(index)\n\n    node.visitChildren(tagName, (child) => {\n        if(child.getAttr(\"w:ilvl\") === strIndex) {\n            result = child.shallowCopy()\n            return false\n        }\n    })\n\n    if(!result) {\n        result = XML.Node.build(tagName).setAttr(\"w:ilvl\", strIndex)\n        node.appendChildren([result])\n    }\n\n    return result\n}\n\nexport class AbstractNum extends XML.Wrapper {\n    getId() {\n        return this.node.getAttr(\"w:abstractNumId\")\n    }\n\n    getLevel(index: number) {\n        return getNodeLevel(this.node, \"w:lvl\", index)\n    }\n}\n\nexport class Num extends XML.Wrapper {\n    getId() {\n        return this.node.getAttr(\"w:numId\")\n    }\n\n    getAbstractNumId() {\n        return OXML.getChildVal(this.node, \"w:abstractNumId\")\n    }\n\n    getLevelOverride(index: number) {\n        return getNodeLevel(this.node, \"w:lvlOverride\", index)\n    }\n\n    setId(id: string) {\n        this.node.setAttr(\"w:numId\", id)\n    }\n\n    setAbstractNumId(id: string) {\n        OXML.setChildVal(this.node, \"w:abstractNumId\", id)\n    }\n}\n\nexport default class Numbering extends XML.Serializable {\n    abstractNums: Map<string, AbstractNum> = new Map()\n    nums: Map<string, Num> = new Map()\n\n    readXml(xml: XML.Node) {\n\n        let styles = xml.getChild(\"w:numbering\")\n\n        styles?.visitChildren(\"w:abstractNum\", (child) => {\n            let abstractNum = new AbstractNum().readXml(child.shallowCopy())\n            this.abstractNums.set(abstractNum.getId(), abstractNum)\n        })\n\n        styles?.visitChildren(\"w:num\", (child) => {\n            let num = new Num().readXml(child.shallowCopy())\n            this.nums.set(num.getId(), num)\n        })\n\n        return this\n    }\n\n    toXml() {\n        let abstractNums = Array.from(this.abstractNums.values())\n        let nums = Array.from(this.nums.values())\n\n        return XML.Node.createDocument().appendChildren([\n            XML.Node.build(\"w:numbering\")\n                .appendChildren(abstractNums.map((style) => {\n                    return style.node.deepCopy()\n                }))\n                .appendChildren(nums.map((style) => {\n                    return style.node.deepCopy()\n                }))\n        ])\n    }\n\n    getUnusedNumId() {\n        let index = 1\n        while(this.nums.has(String(index))) {\n            index += 2\n        }\n        return String(index)\n    }\n}","\nexport interface WordResourceType {\n    mimeType: string\n    xmlnsTag?: string\n}\n\nexport function getResourceTypeForMimeType(mimeType: string) {\n    for(let key of Object.getOwnPropertyNames(resourceTypes)) {\n        if(key === \"__proto__\") continue\n        if(resourceTypes[key].mimeType === mimeType) {\n            return key\n        }\n    }\n}\n\nexport const resourceTypes: {\n    [key: string]: WordResourceType\n} = {\n    app: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.extended-properties+xml\",\n        xmlnsTag: \"Properties\"\n    },\n    core: {\n        mimeType: \"application/vnd.openxmlformats-package.core-properties+xml\",\n        xmlnsTag: \"cp:coreProperties\"\n    },\n    custom: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.custom-properties+xml\",\n        xmlnsTag: \"Properties\"\n    },\n    document: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.document.main+xml\",\n        xmlnsTag: \"w:document\"\n    },\n    relationships: {\n        mimeType: \"application/vnd.openxmlformats-package.relationships+xml\",\n        xmlnsTag: \"Relationships\"\n    },\n    webSettings: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.webSettings+xml\",\n        xmlnsTag: \"webSettings\"\n    },\n    numbering: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.numbering+xml\",\n        xmlnsTag: \"w:numbering\"\n    },\n    settings: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.settings+xml\",\n        xmlnsTag: \"w:settings\"\n    },\n    styles: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.styles+xml\",\n        xmlnsTag: \"w:styles\"\n    },\n    fontTable: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.fontTable+xml\",\n        xmlnsTag: \"w:fonts\"\n    },\n    theme: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.theme+xml\",\n        xmlnsTag: \"a:theme\"\n    },\n    comments: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.comments+xml\",\n        xmlnsTag: \"w:comments\"\n    },\n    footnotes: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.footnotes+xml\",\n        xmlnsTag: \"w:footnotes\"\n    },\n    footer: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.footer+xml\",\n        xmlnsTag: \"w:ftr\"\n    },\n    header: {\n        mimeType: \"application/vnd.openxmlformats-officedocument.wordprocessingml.header+xml\",\n        xmlnsTag: \"w:hdr\"\n    },\n    png: {\n        mimeType: \"image/png\"\n    },\n}","\nexport function *uniqueNameGenerator(name: string) {\n    let index = 0\n    while (true) {\n        let nameCandidate = name\n        if (index > 0) nameCandidate += \"_\" + index\n        yield nameCandidate\n        index++;\n    }\n}","import JSZip from \"jszip\";\nimport * as XML from \"src/xml\"\nimport * as OXML from \"src/word/oxml\"\nimport fs from \"fs\";\nimport Relationships from \"src/word/relationships\";\nimport ContentTypes from \"src/word/content-types\";\nimport Styles from \"src/word/styles\";\nimport Numbering from \"src/word/numbering\";\nimport {getResourceTypeForMimeType, resourceTypes, WordResourceType} from \"./resource-types\";\nimport path from \"path\";\nimport {uniqueNameGenerator} from \"src/utils\";\n\nexport const contentTypesPath = \"/[Content_Types].xml\"\nexport const globalRelsPath = \"/_rels/.rels\"\n\nexport class WordResource<T extends XML.Serializable> {\n    document: WordDocument\n    path: string\n    resource: T\n    rels?: Relationships = null\n\n    constructor(document: WordDocument, path: string, resource: T) {\n        this.document = document\n        this.path = path\n        this.resource = resource\n    }\n\n    saveRels() {\n        if(!this.rels) return\n        let relsXml = this.rels.toXml()\n        this.document.saveXml(OXML.getRelsPath(this.path), relsXml)\n    }\n\n    save() {\n        let xml = this.resource.toXml()\n        let contentType = this.document.contentTypes.resource.getContentTypeForPath(this.path)\n\n        if(contentType) {\n            let resourceType = getResourceTypeForMimeType(contentType)\n            if (resourceType) {\n                OXML.fixXmlns(xml, resourceTypes[resourceType].xmlnsTag)\n            }\n        }\n\n        this.document.saveXml(this.path, xml)\n        this.saveRels()\n    }\n\n    setRels(rels: Relationships): this {\n        this.rels = rels\n        return this\n    }\n}\n\nexport type WordXMLFactory<T extends XML.Serializable> = (document: WordDocument, path: string, xml: XML.Node, rels: Relationships) => WordResource<T>\n\nexport const ResourceFactories = {\n    generic: (document, path, xml) => {\n        return new WordResource(document, path, new XML.Wrapper().readXml(xml))\n    },\n    genericWithRel: (document, path, xml, rel) => {\n        return new WordResource(document, path, new XML.Wrapper().readXml(xml)).setRels(rel)\n    },\n    styles: (document, path, xml) => {\n        return new WordResource(document, path, new Styles().readXml(xml))\n    },\n    numbering: (document, path, xml) => {\n        return new WordResource(document, path, new Numbering().readXml(xml))\n    },\n    relationships: (document, path, xml) => {\n        return new WordResource(document, path, new Relationships().readXml(xml))\n    },\n    contentTypes: (document, path, xml) => {\n        return new WordResource(document, path, new ContentTypes().readXml(xml))\n    },\n}\n\nexport default class WordDocument {\n\n    zipContents: JSZip\n    wrappers: Map<string, WordResource<XML.Serializable>> = new Map()\n\n    contentTypes: WordResource<ContentTypes>\n    globalRels: WordResource<Relationships>\n    numbering: WordResource<Numbering>\n    styles: WordResource<Styles>\n\n    document: WordResource<XML.Serializable>\n    settings: WordResource<XML.Serializable>\n    fontTable: WordResource<XML.Serializable>\n    comments: WordResource<XML.Serializable>\n\n    headers: WordResource<XML.Serializable>[] = []\n    footers: WordResource<XML.Serializable>[] = []\n\n    async load(path: string) {\n        const contents = await fs.promises.readFile(path)\n        this.zipContents = await JSZip.loadAsync(contents)\n\n        this.contentTypes = await this.createResourceForPath(ResourceFactories.contentTypes, contentTypesPath)\n        this.globalRels = await this.createResourceForPath(ResourceFactories.relationships, globalRelsPath)\n        this.document = await this.createResourceForType(ResourceFactories.genericWithRel, resourceTypes.document)\n        this.styles = await this.createResourceForType(ResourceFactories.styles, resourceTypes.styles)\n        this.settings = await this.createResourceForType(ResourceFactories.generic, resourceTypes.settings)\n        this.numbering = await this.createResourceForType(ResourceFactories.numbering, resourceTypes.numbering)\n        this.fontTable = await this.createResourceForType(ResourceFactories.generic, resourceTypes.fontTable)\n        this.comments = await this.createResourceForType(ResourceFactories.generic, resourceTypes.comments)\n\n        this.headers = await this.createResourcesForType(ResourceFactories.generic, resourceTypes.header)\n        this.footers = await this.createResourcesForType(ResourceFactories.generic, resourceTypes.footer)\n\n        return this\n    }\n\n    getSinglePathForMimeType(type: string) {\n        let paths = this.getPathsForMimeType(type)\n        if(paths.length !== 1) return null\n        return paths[0]\n    }\n\n    async createResourceForType<T extends XML.Serializable>(factory: WordXMLFactory<T>, type: WordResourceType): Promise<WordResource<T>> {\n        let path = this.getSinglePathForMimeType(type.mimeType)\n        if(!path) return null\n        return await this.createResourceForPath(factory, path)\n    }\n\n    async createResourcesForType<T extends XML.Serializable>(factory: WordXMLFactory<T>, type: WordResourceType): Promise<WordResource<T>[]> {\n        let paths = this.getPathsForMimeType(type.mimeType)\n\n        return await Promise.all(paths.map(path => this.createResourceForPath(factory, path)))\n    }\n\n    async createResourceForPath<T extends XML.Serializable>(factory: WordXMLFactory<T>, pathString: string): Promise<WordResource<T>> {\n        pathString = OXML.normalizePath(pathString)\n\n        if(this.wrappers.has(pathString)) {\n            throw new Error(\"This resource have already been created\")\n        }\n\n        let relsPath = OXML.getRelsPath(pathString)\n        let relationships: Relationships | null = null\n\n        let relationshipsXml = await this.getXml(relsPath)\n        if(relationshipsXml) {\n            relationships = new Relationships().readXml(relationshipsXml)\n        }\n\n        let resource = factory(this, pathString, await this.getXml(pathString), relationships)\n\n        this.wrappers.set(pathString, resource)\n\n        return resource\n    }\n\n    getPathsForMimeType(type: string) {\n        let result = []\n        this.zipContents.forEach((path) => {\n            let mimeType = this.contentTypes.resource.getContentTypeForPath(path)\n            if(mimeType === type) {\n                result.push(path)\n            }\n        })\n        return result\n    }\n\n    hasFile(path: string) {\n        return this.zipContents.file(path) !== null\n    }\n\n    async getFile(path: string) {\n        return await this.zipContents.file(path.slice(1)).async(\"arraybuffer\")\n    }\n\n    async getXml(path: string) {\n        let contents = this.zipContents.file(path.slice(1))\n        if(!contents) return null\n        return XML.Node.fromXmlString(await contents.async(\"string\"))\n    }\n\n    getPathForTarget(target: string) {\n        return \"/word/\" + target\n    }\n\n    getUniqueMediaTarget(name: string) {\n        let targetPath = \"media/\"\n\n        let extension = path.extname(name)\n        let basename = path.basename(name, extension)\n\n        for(let uniqueBasename of uniqueNameGenerator(basename)) {\n            let name = targetPath + uniqueBasename + extension\n            if(!this.zipContents.file(this.getPathForTarget(name))) {\n                return name\n            }\n        }\n    }\n\n    saveFile(path: string, data: ArrayBuffer) {\n        this.zipContents.file(path.slice(1), data)\n    }\n\n    saveXml(path: string, xml: XML.Node) {\n        this.zipContents.file(path.slice(1), xml.toXmlString())\n    }\n\n    async save(path: string) {\n        for(let [path, resource] of this.wrappers) {\n            resource.save()\n        }\n\n        const contents = await this.zipContents.generateAsync({type: \"uint8array\"})\n        await fs.writeFileSync(path, contents);\n    }\n}\n","import mdast from \"mdast\"\nimport yaml from \"yaml\"\n\ntype DocumentJsonSection = Array<DocumentJsonSection> | Object | string\n\nfunction metaType(value: DocumentJsonSection) {\n    if(Array.isArray(value)) return \"array\"\n    return typeof value\n}\n\nexport class DocumentJsonMeta {\n    section: DocumentJsonSection\n    path: string\n\n    constructor(section: DocumentJsonSection, path: string = \"\") {\n        this.section = section\n        this.path = path\n    }\n\n    getSection(path: string) {\n        let any = this.getChild(path)\n        return new DocumentJsonMeta(any, this.getAbsPath(path))\n    }\n\n    isArray() {\n        if (this.section === undefined) {\n            return false\n        } else return Array.isArray(this.section)\n    }\n\n    isMap() {\n        if (this.section === undefined) {\n            return false\n        } else return (typeof this.section === \"object\" && !this.isArray())\n    }\n\n    asArray() {\n        if (this.section === undefined) {\n            this.reportNotExistError(\"\", \"array\")\n        } else if (!this.isArray()) {\n            this.reportWrongTypeError(\"\", \"array\", metaType(this.section))\n        } else {\n            return (this.section as Array<DocumentJsonSection>).map((element, index) => {\n                return new DocumentJsonMeta(element, this.getAbsPath(String(index)))\n            })\n        }\n    }\n\n    getKeys() {\n        if (!this.section) {\n            this.reportNotExistError(\"\", \"object\")\n        } else if (!this.isMap()) {\n            this.reportWrongTypeError(\"\", \"object\", metaType(this.section))\n        } else {\n            return Object.keys(this.section)\n        }\n    }\n\n    getString(path: string = \"\"): string {\n        let child = this.getChild(path)\n        if (!child) {\n            this.reportNotExistError(path, \"MetaInlines\")\n        } else if (typeof child !== \"string\") {\n            this.reportWrongTypeError(path, \"MetaInlines\", metaType(child))\n        } else {\n            return child\n        }\n    }\n\n    private reportNotExistError(relPath: string, expected: string): never {\n        let absPath = this.getAbsPath(relPath)\n        throw new Error(\"Failed to parse document metadata: expected to have \" + expected + \" at path \" + absPath)\n    }\n\n    private reportWrongTypeError(relPath: string, expected: string, actual: string): never {\n        let absPath = this.getAbsPath(relPath)\n        throw new Error(\"Failed to parse document metadata: expected \" + expected + \" at path \" + absPath + \", got \" +\n            actual + \" instead\")\n    }\n\n    private getAbsPath(relPath: string) {\n        if (this.path.length) {\n            if (relPath.length) {\n                return this.path + \".\" + relPath\n            }\n            return this.path\n        }\n        return relPath\n    }\n\n    getChild(path: string): DocumentJsonSection | undefined {\n        if (!path.length) return this.section\n\n        let result = this.section\n\n        for (let component of path.split(\".\")) {\n            // Be safe from prototype pollution\n            if (component === \"__proto__\") return undefined\n            if (!result) return undefined\n\n            if (Array.isArray(result)) {\n                let index = Number.parseInt(component)\n                if (!Number.isNaN(index)) {\n                    result = result[index]\n                }\n            } else if (typeof result === \"object\") {\n                result = result[component]\n            } else {\n                return undefined\n            }\n        }\n        return result\n    }\n\n    static fromMarkdown(markdown: mdast.Root) {\n        let child = markdown.children[0]\n        if (!child) return null\n        if (child.type !== \"yaml\") return null\n\n        return new DocumentJsonMeta(yaml.parse(child.value))\n    }\n}","import {DocumentJsonMeta} from \"src/document-json-meta\";\n\nexport default class DocumentReferences {\n    stack: number[] = []\n    depthThreshold: number = 1\n    groups = new Map<string, Map<string, string>>()\n    meta: DocumentJsonMeta\n\n    constructor(meta: DocumentJsonMeta) {\n        this.meta = meta\n    }\n\n    getPrefixMap(prefix: string) {\n        let map = this.groups.get(prefix)\n        if (!map) {\n            map = new Map()\n            this.groups.set(prefix, map)\n        }\n        return map\n    }\n\n    getSection(depth: number, id?: string): string {\n        depth = Math.max(0, depth - this.depthThreshold)\n\n        while (this.stack.length > depth) this.stack.pop()\n        if (this.stack.length === depth) {\n            this.stack[this.stack.length - 1]++\n        } else {\n            while (this.stack.length < depth) this.stack.push(1)\n        }\n\n        if (this.stack.length === 0) {\n            return\n        }\n\n        let result = this.stack.join(\".\")\n\n        if(id) {\n            let prefix = id.split(\":\")[0]\n            let map = this.getPrefixMap(prefix)\n\n            if (map.has(id)) {\n                console.warn(\"Multiple definitions of section \" + id)\n            }\n\n            map.set(id, result)\n        }\n\n        if (this.stack.length == 1) {\n            result += \".\"\n        }\n\n        return result\n    }\n\n    getReference(reference: string): string {\n        let prefix = reference.split(\":\")[0]\n        let map = this.getPrefixMap(prefix)\n\n        let index = map.get(reference)\n        if (index === undefined) {\n            index = (map.size + 1).toString()\n            map.set(reference, index)\n        }\n\n        return index.toString()\n    }\n\n    getCite(reference: string): string {\n        let links = this.meta.getSection(\"links\").asArray()\n        for (let i = 0; i < links.length; i++) {\n            let link = links[i]\n            if (link.isMap() && link.getString(\"id\") === reference) {\n                return \"[\" + (i + 1).toString() + \"]\"\n            }\n        }\n\n        console.warn(\"Undefined citation: \" + reference)\n\n        return \"[?]\"\n    }\n}","import {fromMarkdown} from \"mdast-util-from-markdown\";\nimport {frontmatterFromMarkdown} from 'mdast-util-frontmatter'\nimport {frontmatter} from 'micromark-extension-frontmatter'\nimport {math} from 'micromark-extension-math'\nimport {mathFromMarkdown} from 'mdast-util-math'\nimport {gfmTableFromMarkdown} from 'mdast-util-gfm-table'\nimport {gfmTable} from 'micromark-extension-gfm-table'\nimport {visit} from 'unist-util-visit'\nimport mdast, {Text} from 'mdast'\nimport DocumentReferences from \"src/markdown/document-references\";\nimport {DocumentJsonMeta} from \"src/document-json-meta\";\n\ndeclare module 'mdast' {\n    interface HeadingData {\n        id?: string;\n    }\n\n    interface ImageData {\n        attrs?: { [key: string]: string | number }\n    }\n}\n\nfunction addHeaderReferences(tree: mdast.Root) {\n    visit(tree, 'heading', (node) => {\n        let lastChild = node.children[node.children.length - 1]\n\n        if (!lastChild || lastChild.type !== \"text\") return\n\n        lastChild = lastChild as Text\n\n        const match = lastChild.value.match(/\\s*{#(.*)}/);\n        if (match) {\n            node.data = node.data || {};\n            node.data.id = match[1];\n            lastChild.value = lastChild.value.replace(/\\s*{#.*}/, '').trim();\n        }\n    });\n}\n\nfunction removePositions(tree: mdast.Root) {\n    visit(tree, (node) => {\n        node.position = undefined\n    });\n}\n\nfunction addReferences(tree: mdast.Root) {\n    let meta = DocumentJsonMeta.fromMarkdown(tree)\n    let references = new DocumentReferences(meta)\n\n    visit(tree, \"heading\", (node) => {\n        let reference = references.getSection(node.depth, node.data?.id)\n        node.children.unshift({\n            type: \"text\",\n            value: reference + \" \"\n        })\n    })\n}\n\nfunction parseAttributes(attributeString) {\n    if (!attributeString.startsWith(\"{\") || !attributeString.endsWith(\"}\")) return\n    attributeString = attributeString.slice(1, -1)\n\n    let regex = /(\\w[\\w0-9_-]*)=(?:(?:(?<quote>[\"'])((?:\\\\.|[^\\\\])*?)\\k<quote>)|((?:[^'\"]\\S*)?))/g\n\n    let match;\n    let result = Object.create(null)\n\n    while ((match = regex.exec(attributeString)) !== null) {\n        let key = match[1];\n        let value\n\n        if (match[4]) {\n            try {\n                value = JSON.parse('\"' + match[4] + '\"')\n            } catch (e) {\n                value = match[4]\n            }\n        } else {\n            value = match[3]\n        }\n\n        result[key] = value\n    }\n\n    return result;\n}\n\nfunction parseImageAttrs(tree: mdast.Root) {\n    visit(tree, (node) => {\n        if ('children' in node) {\n            for (let i = 1; i < node.children.length; i++) {\n                let previous = node.children[i - 1]\n                let current = node.children[i]\n\n                if (previous.type !== \"image\" || current.type !== \"text\") {\n                    continue\n                }\n\n                let text = current as mdast.Text\n                let image = previous as mdast.Image\n\n                let attrs = parseAttributes(text.value)\n                if (attrs) {\n                    image.data = image.data || {}\n                    image.data = {attrs: attrs}\n                    node.children.splice(i, 1)\n                }\n            }\n        }\n    })\n}\n\nexport function parseMarkdown(src: string) {\n    let tree = fromMarkdown(src, {\n        extensions: [math(), gfmTable(), frontmatter(['yaml'])],\n        mdastExtensions: [mathFromMarkdown(), gfmTableFromMarkdown(), frontmatterFromMarkdown(['yaml'])]\n    })\n\n    addHeaderReferences(tree)\n    removePositions(tree)\n    addReferences(tree)\n    parseImageAttrs(tree)\n\n    return tree\n}","import WordDocument from \"src/word/word-document\";\nimport * as XML from \"src/xml\";\n\nexport default class ParagraphTemplateSubstitution {\n    private document: WordDocument;\n    private template: string;\n    private replacement: () => XML.Node[];\n\n    setDocument(document: WordDocument) {\n        this.document = document\n        return this\n    }\n\n    setTemplate(template: string) {\n        this.template = template\n        return this\n    }\n\n    setReplacement(replacement: () => XML.Node[]) {\n        this.replacement = replacement\n        return this\n    }\n\n    perform() {\n        const body = this.document.document.resource.toXml().getChild(\"w:document\").getChild(\"w:body\")\n        this.replaceParagraphsWithTemplate(body)\n        return this\n    }\n\n    private replaceParagraphsWithTemplate(body: XML.Node) {\n        for(let i = 0; i < body.getChildrenCount(); i++) {\n            let child = body.getChild([i])\n\n            let paragraphText = \"\"\n            child.visitSubtree(\"w:t\", (textNode) => {\n                paragraphText += XML.getTextContents(textNode)\n            })\n\n            if(paragraphText.indexOf(this.template) === -1) {\n                continue\n            }\n\n            if(paragraphText !== this.template) {\n                throw new Error(`The ${this.template} pattern should be the only text of the paragraph`)\n            }\n\n            body.removeChild([i])\n            let replacement = this.replacement()\n            body.insertChildren(replacement, [i])\n            i += replacement.length - 1\n        }\n    }\n}","import WordDocument from \"src/word/word-document\";\nimport * as XML from \"src/xml\";\n\nexport default class InlineTemplateSubstitution {\n    private document: WordDocument;\n    private template: string;\n    private replacement: string;\n\n    setDocument(document: WordDocument) {\n        this.document = document\n        return this\n    }\n\n    setTemplate(template: string) {\n        this.template = template\n        return this\n    }\n\n    setReplacement(replacement: string) {\n        this.replacement = replacement\n        return this\n    }\n\n    private replaceInlineTemplate(body: XML.Node) {\n        for(let i = 0; i < body.getChildrenCount(); i++) {\n            let child = body.getChild([i])\n\n            child.visitSubtree(\"w:t\", (paragraphText) => {\n                paragraphText.visitSubtree(XML.keys.text, (textNode) => {\n                    textNode.setText(textNode.getText().replace(this.template, this.replacement))\n                })\n            })\n        }\n    }\n\n    private removeParagraphsWithTemplate(body: XML.Node) {\n        for(let i = 0; i < body.getChildrenCount(); i++) {\n            let child = body.getChild([i])\n            let found = false\n\n            child.visitSubtree(\"w:t\", (paragraphText) => {\n                paragraphText.visitSubtree(XML.keys.text, (textNode) => {\n                    let text = textNode.getText()\n\n                    if(text.indexOf(this.template) !== -1) {\n                        found = true\n                    }\n                })\n\n                return !found\n            })\n\n            if(found) {\n                body.removeChild([i])\n                i--\n            }\n        }\n    }\n\n    performIn(body: XML.Node) {\n        if (this.replacement === \"@none\") {\n            this.removeParagraphsWithTemplate(body)\n        } else {\n            this.replaceInlineTemplate(body)\n        }\n    }\n\n    perform() {\n        let document = this.document\n\n        let documentBody = document.document.resource.toXml().getChild(\"w:document\").getChild(\"w:body\")\n        this.performIn(documentBody)\n\n        for(let header of document.headers) {\n            this.performIn(header.resource.toXml().getChild(\"w:hdr\"))\n        }\n\n        for(let footer of document.footers) {\n            this.performIn(footer.resource.toXml().getChild(\"w:ftr\"))\n        }\n\n        return this\n    }\n}\n","import WordDocument from \"src/word/word-document\"\nimport mdast from \"mdast\"\nimport {DocumentJsonMeta} from \"src/document-json-meta\"\nimport * as XML from \"src/xml\"\nimport * as OXML from 'src/word/oxml'\nimport ParagraphTemplateSubstitution from \"src/word-templates/paragraph-template-substitution\";\nimport {languages} from \"src/main\";\nimport InlineTemplateSubstitution from \"src/word-templates/inline-template-substitution\";\nimport {Num} from \"src/word/numbering\";\nimport ImageSize from \"image-size\";\nimport fs from \"fs\"\nimport path from \"path\"\nimport temml from \"temml\"\nimport {mml2omml} from \"mathml2omml\"\n\nexport interface NumberingStyle {\n    numId: string,\n    styleId: string\n}\n\nlet DecimalNumberingStyle: NumberingStyle = {styleId: \"ispNumList\", numId: \"33\"}\nlet BulletNumberingStyle: NumberingStyle = {styleId: \"ispList1\", numId: \"43\"}\n\nexport class GenerationContext {\n    doc: WordDocument\n    meta: DocumentJsonMeta\n    nodeStack: XML.Node[] = []\n    numberingStack: NumberingStyle[] = []\n\n    visit(element: mdast.Node) {\n        visitors[element.type]?.(element, this)\n    }\n\n    visitChildren(element: mdast.Parent) {\n        for (let child of (element as mdast.Parent).children) {\n            this.visit(child)\n        }\n    }\n\n    getCurrentNode() {\n        return this.nodeStack[this.nodeStack.length - 1]\n    }\n\n    pushNode(node: XML.Node) {\n        this.nodeStack.push(node)\n    }\n\n    popNode() {\n        this.nodeStack.pop()\n    }\n\n    pushNumberingStyle(style: NumberingStyle) {\n        this.numberingStack.push(style)\n    }\n\n    popNumberingStyle() {\n        this.numberingStack.pop()\n    }\n\n    getNumberingStyle() {\n        return this.numberingStack[this.numberingStack.length - 1]\n    }\n}\n\nconst visitors: {\n    [K in keyof mdast.RootContentMap]?: (source: mdast.RootContentMap[K], ctx: GenerationContext) => void;\n} = {\n    \"paragraph\": (node, ctx) => {\n        let numberingStyle = ctx.getNumberingStyle()\n        let styleId = numberingStyle ? numberingStyle.styleId : ctx.doc.styles.resource.getStyleByName(\"ispText_main\").getId()\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n\n        if (numberingStyle) {\n            paragraph.getChild(\"w:pPr\").pushChild(\n                XML.Node.build(\"w:numPr\").appendChildren([\n                    XML.Node.build(\"w:ilvl\").setAttr(\"w:val\", String(ctx.numberingStack.length - 1)),\n                    XML.Node.build(\"w:numId\").setAttr(\"w:val\", numberingStyle.numId),\n                ])\n            )\n        }\n\n        ctx.getCurrentNode().pushChild(paragraph)\n        ctx.pushNode(paragraph)\n        ctx.visitChildren(node)\n        ctx.popNode()\n    },\n\n    \"strong\": (node, ctx) => {\n\n    },\n\n    \"code\": (node, ctx) => {\n        let styleId = ctx.doc.styles.resource.getStyleByName(\"ispListing\").getId()\n\n        let raw = XML.Node.build(\"w:r\")\n        let lines = node.value.split(\"\\n\")\n        for (let line of lines) {\n            if (raw.getChildrenCount() > 0) {\n                raw.pushChild(OXML.buildLineBreak())\n            }\n            raw.pushChild(OXML.buildTextTag(line))\n        }\n\n        ctx.getCurrentNode().pushChild(\n            OXML.buildParagraphWithStyle(styleId)\n                .pushChild(raw)\n        )\n    },\n\n    \"link\": (node, ctx) => {\n\n    },\n\n    \"delete\": (node, ctx) => {\n\n    },\n\n    \"emphasis\": (node, ctx) => {\n\n    },\n\n    \"text\": (node, ctx) => {\n        ctx.getCurrentNode().pushChild(OXML.buildRawTag(node.value))\n    },\n\n    \"table\": (node, ctx) => {\n        let styleId = ctx.doc.styles.resource.getStyleByName(\"Table Grid\").getId()\n\n        let table = XML.Node.build(\"w:tbl\")\n        let tableProperties = XML.Node.build(\"w:tPr\").appendChildren([\n            XML.Node.build(\"w:tblStyle\").setAttr(\"w:val\", styleId)\n        ])\n        table.pushChild(tableProperties)\n        ctx.getCurrentNode().pushChild(table)\n        ctx.pushNode(table)\n        ctx.visitChildren(node)\n        ctx.popNode()\n    },\n\n    \"tableRow\": (node, ctx) => {\n        let row = XML.Node.build(\"w:tr\").appendChildren([])\n        ctx.getCurrentNode().pushChild(row)\n        ctx.pushNode(row)\n        ctx.visitChildren(node)\n        ctx.popNode()\n    },\n\n    \"tableCell\": (node, ctx) => {\n        let styleId = ctx.doc.styles.resource.getStyleByName(\"ispText_main\").getId()\n\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n        let cell = XML.Node.build(\"w:tc\").appendChildren([\n            paragraph\n        ])\n\n        ctx.getCurrentNode().pushChild(cell)\n        ctx.pushNode(paragraph)\n        ctx.visitChildren(node)\n        ctx.popNode()\n    },\n\n    \"inlineMath\": ((node, ctx) => {\n        let value = temml.renderToString(node.value)\n        let omml = mml2omml(value)\n        ctx.getCurrentNode().pushChild(XML.Node.fromXmlString(omml))\n    }),\n\n    \"listItem\": (node, ctx) => {\n        ctx.visitChildren(node)\n    },\n\n    \"image\": (node, ctx) => {\n        let imageBuffer = fs.readFileSync(node.url)\n        let file = ImageSize(imageBuffer)\n\n        let size = getImageSize(node, file.width / file.height)\n\n        // LibreOffice seems to break when filenames contain bad symbols.\n        let mediaName = path.basename(node.url).replace(/[^a-zA-Z0-9.]/g, \"_\")\n        let mediaTarget = ctx.doc.getUniqueMediaTarget(mediaName)\n        let mediaPath = ctx.doc.getPathForTarget(mediaTarget)\n\n        ctx.doc.saveFile(mediaPath, imageBuffer)\n\n        let unusedId = ctx.doc.document.rels.getUnusedId()\n        ctx.doc.document.rels.addRelation({\n            id: unusedId,\n            target: mediaTarget,\n            type: \"http://schemas.openxmlformats.org/officeDocument/2006/relationships/image\"\n        })\n\n        let image = createImage(unusedId, size[0], size[1])\n        ctx.getCurrentNode().pushChild(XML.Node.build(\"w:r\").pushChild(image))\n    },\n\n    \"blockquote\": (node, ctx) => {\n\n    },\n\n    \"break\": (node, ctx) => {\n\n    },\n\n    \"heading\": (node, ctx) => {\n        let headings = [\n            \"ispSubHeader-1 level\",\n            \"ispSubHeader-2 level\",\n            \"ispSubHeader-3 level\",\n        ]\n\n        let level = node.depth\n\n        if (level > headings.length) {\n            level = headings.length as typeof node.depth\n        }\n\n        let styleId = ctx.doc.styles.resource.getStyleByName(headings[level - 1]).getId()\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n\n        ctx.getCurrentNode().pushChild(paragraph)\n        ctx.pushNode(paragraph)\n        ctx.visitChildren(node)\n        ctx.popNode()\n    },\n\n    \"imageReference\": (node, ctx) => {\n\n    },\n\n    \"list\": (node, ctx) => {\n        let numberingStyle = node.ordered ? DecimalNumberingStyle : BulletNumberingStyle\n\n        let numId = createNumbering(ctx.doc, numberingStyle.numId, ctx.numberingStack.length, node.start)\n        ctx.pushNumberingStyle({\n            numId: numId,\n            styleId: numberingStyle.styleId\n        })\n        ctx.visitChildren(node)\n        ctx.popNumberingStyle()\n    },\n\n    \"math\": (node, ctx) => {\n\n    },\n\n    \"inlineCode\": (node, ctx) => {\n        let styleId = ctx.doc.styles.resource.getStyleByName(\"ispListing Знак\").getId()\n\n        let raw = OXML.buildRawTag(node.value, [\n            XML.Node.build(\"w:rStyle\").setAttr(\"w:val\", styleId)\n        ])\n\n        ctx.getCurrentNode().pushChild(raw)\n    },\n}\n\nfunction parseSizeAttr(attr: string | number | undefined) {\n    if (typeof attr !== \"string\") return null\n\n    if (attr.endsWith(\"cm\")) {\n        let centimeters = parseFloat(attr.slice(0, -2))\n        if (Number.isFinite(centimeters)) return centimeters\n    }\n\n    return null\n}\n\nfunction getImageSize(image: mdast.Image, aspect: number) {\n    let width: number | null = parseSizeAttr(image.data?.attrs?.width)\n    let height: number | null = parseSizeAttr(image.data?.attrs?.height)\n\n    if (width === null && height === null) {\n        width = 10\n    }\n\n    if (height === null) {\n        height = width / aspect\n    }\n\n    if (width === null) {\n        width = aspect * height\n    }\n\n    return [width, height]\n}\n\nfunction createNumbering(document: WordDocument, abstractId: string, depth: number, start: number) {\n    let newNumId = document.numbering.resource.getUnusedNumId()\n    let newNumbering = new Num().readXml(XML.Node.build(\"w:num\"))\n    newNumbering.setAbstractNumId(abstractId)\n    newNumbering.setId(newNumId)\n\n    newNumbering.getLevelOverride(depth).pushChild(\n        XML.Node.build(\"w:startOverride\")\n            .setAttr(\"w:val\", String(start))\n    )\n\n    document.numbering.resource.nums.set(newNumId, newNumbering)\n    return newNumId\n}\n\nfunction createImage(id: string, width: number, height: number) {\n\n    let widthEmu = Math.floor(width * 360000)\n    let heightEmu = Math.floor(height * 360000)\n\n    return XML.Node.build(\"w:drawing\").appendChildren([\n        XML.Node.build(\"wp:inline\").appendChildren([\n            XML.Node.build(\"a:graphic\").appendChildren([\n                XML.Node.build(\"a:graphicData\").setAttrs({\n                    \"uri\": \"http://schemas.openxmlformats.org/drawingml/2006/picture\"\n                }).appendChildren([\n                    XML.Node.build(\"pic:pic\").appendChildren([\n                        XML.Node.build(\"pic:nvPicPr\").appendChildren([\n                            XML.Node.build(\"pic:cNvPr\").setAttrs({\n                                \"id\": \"pic\" + id,\n                                \"name\": \"Picture\"\n                            }),\n                            XML.Node.build(\"pic:cNvPicPr\")\n                        ]),\n                        XML.Node.build(\"pic:blipFill\").appendChildren([\n                            XML.Node.build(\"a:blip\").setAttr(\"r:embed\", id),\n                            XML.Node.build(\"a:stretch\").appendChildren([\n                                XML.Node.build(\"a:fillRect\")\n                            ])\n                        ]),\n                        XML.Node.build(\"pic:spPr\").appendChildren([\n                            XML.Node.build(\"a:xfrm\").appendChildren([\n                                XML.Node.build(\"a:off\").setAttrs({\n                                    \"x\": \"0\",\n                                    \"y\": \"0\"\n                                }),\n                                XML.Node.build(\"a:ext\").setAttrs({\n                                    \"cx\": String(widthEmu),\n                                    \"cy\": String(heightEmu)\n                                })\n                            ]),\n                            XML.Node.build(\"a:prstGeom\").setAttr(\"prst\", \"rect\").appendChildren([\n                                XML.Node.build(\"a:avLst\")\n                            ])\n                        ])\n                    ])\n                ])\n            ])\n        ])\n    ]);\n}\n\nexport function generateDocxBody(source: mdast.Root, target: WordDocument, meta: DocumentJsonMeta) {\n    new ParagraphTemplateSubstitution()\n        .setDocument(target)\n        .setTemplate(\"{{{body}}}\")\n        .setReplacement(() => {\n            let context = new GenerationContext()\n\n            // Fictive node\n            let node = XML.Node.build(\"w:body\")\n\n            context.doc = target\n            context.pushNode(node)\n\n            context.visitChildren(source)\n\n            return node.getChildren()\n        })\n        .perform()\n}\n\nfunction getLinksParagraphs(doc: WordDocument, meta: DocumentJsonMeta) {\n    let styleId = doc.styles.resource.getStyleByName(\"ispLitList\").getId()\n    let numId = \"80\"\n    let linksSection = meta.getSection(\"links\").asArray()\n\n    let result = []\n\n    for (let link of linksSection) {\n        let description: string\n        // Backwards compatibility\n        if (link.isMap()) {\n            description = link.getString(\"description\")\n        } else {\n            description = link.getString()\n        }\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n        let style = paragraph.getChild(\"w:pPr\")\n        style.pushChild(OXML.buildNumPr(\"0\", numId))\n\n        paragraph.pushChild(OXML.buildRawTag(description))\n        result.push(paragraph)\n    }\n\n    return result\n}\n\nfunction getAuthors(doc: WordDocument, meta: DocumentJsonMeta, language: string) {\n    let styleId = doc.styles.resource.getStyleByName(\"ispAuthor\").getId()\n    let authors = meta.getSection(\"authors\").asArray()\n    let organizations = meta\n        .getSection(\"organizations\")\n        .asArray()\n        .map(section => section.getString(\"id\"))\n\n    let result = []\n\n    for (let author of authors) {\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n\n        let name = author.getString(\"name_\" + language)\n        let orcid = author.getString(\"orcid\")\n        let email = author.getString(\"email\")\n        let authorOrgs = author.getSection(\"organizations\")\n            .asArray()\n            .map(section => section.getString())\n            .map(id => organizations.indexOf(id) + 1)\n            .join(\",\")\n\n        let authorLine = `${name}, ORCID: ${orcid}, <${email}>`\n\n        paragraph.pushChild(OXML.buildRawTag(authorOrgs, [OXML.buildSuperscriptTextStyle()]))\n        paragraph.pushChild(OXML.buildRawTag(authorLine))\n\n        result.push(paragraph)\n    }\n\n    return result\n}\n\nfunction getOrganizations(doc: WordDocument, meta: DocumentJsonMeta, language: string) {\n    let styleId = doc.styles.resource.getStyleByName(\"ispAuthor\").getId()\n    let organizations = meta.getSection(\"organizations\").asArray()\n\n    let orgIndex = 1\n    let result = []\n\n    for (let organization of organizations) {\n        let paragraph = OXML.buildParagraphWithStyle(styleId)\n\n        let indexLine = String(orgIndex)\n\n        paragraph.pushChild(OXML.buildRawTag(indexLine, [OXML.buildSuperscriptTextStyle()]))\n        paragraph.pushChild(OXML.buildRawTag(organization.getString(\"name_\" + language)))\n\n        result.push(paragraph)\n\n        orgIndex++\n    }\n\n    return result\n}\n\nfunction getAuthorsDetail(doc: WordDocument, meta: DocumentJsonMeta) {\n    let styleId = doc.styles.resource.getStyleByName(\"ispText_main\").getId()\n    let authors = meta.getSection(\"authors\").asArray()\n\n    let result = []\n\n    for (let author of authors) {\n        for (let language of languages) {\n            let line = author.getString(\"details_\" + language)\n            let newParagraph = OXML.buildParagraphWithStyle(styleId)\n            newParagraph.getChild(\"w:pPr\").pushChild(\n                XML.Node.build(\"w:spacing\")\n                    .setAttr(\"w:before\", \"30\")\n                    .setAttr(\"w:after\", \"120\")\n            )\n            newParagraph.pushChild(OXML.buildRawTag(line))\n            result.push(newParagraph)\n        }\n    }\n\n    return result\n}\n\nexport function substituteTemplates(document: WordDocument, meta: DocumentJsonMeta) {\n    let inlineSubstitution = new InlineTemplateSubstitution().setDocument(document)\n    let paragraphSubstitution = new ParagraphTemplateSubstitution().setDocument(document)\n\n    for (let language of languages) {\n        let templates = [\"header\", \"abstract\", \"keywords\", \"for_citation\", \"acknowledgements\"]\n        for (let template of templates) {\n\n            let template_lang = template + \"_\" + language\n            let replacement = meta.getString(template_lang)\n\n            inlineSubstitution\n                .setTemplate(\"{{{\" + template_lang + \"}}}\")\n                .setReplacement(replacement)\n                .perform()\n        }\n\n        let header = meta.getString(\"page_header_\" + language)\n\n        if (header === \"@use_citation\") {\n            header = meta.getString(\"for_citation_\" + language)\n        }\n\n        inlineSubstitution\n            .setTemplate(\"{{{page_header_\" + language + \"}}}\")\n            .setReplacement(header)\n            .perform()\n\n        paragraphSubstitution\n            .setTemplate(\"{{{authors_\" + language + \"}}}\")\n            .setReplacement(() => getAuthors(document, meta, language))\n            .perform()\n\n        paragraphSubstitution\n            .setTemplate(\"{{{organizations_\" + language + \"}}}\")\n            .setReplacement(() => getOrganizations(document, meta, language))\n            .perform()\n    }\n\n    paragraphSubstitution\n        .setTemplate(\"{{{links}}}\")\n        .setReplacement(() => getLinksParagraphs(document, meta))\n        .perform()\n\n    paragraphSubstitution\n        .setTemplate(\"{{{authors_detail}}}\")\n        .setReplacement(() => getAuthorsDetail(document, meta))\n        .perform()\n}","import * as path from 'path';\nimport * as fs from 'fs';\nimport * as process from \"process\";\nimport WordDocument from \"src/word/word-document\";\nimport {DocumentJsonMeta} from \"src/document-json-meta\";\nimport {parseMarkdown} from \"src/markdown/markdown\";\nimport {generateDocxBody, substituteTemplates} from \"src/generator/generator\";\nexport const languages = [\"ru\", \"en\"]\nconst resourcesDir = path.dirname(process.argv[1]) + \"/../resources\"\n\nasync function main(): Promise<void> {\n    let argv = process.argv\n    if (argv.length < 4) {\n        console.log(\"Usage: main.js <source> <target>\")\n        process.exit(1)\n    }\n\n    let markdownSource = argv[2]\n    let targetPath = argv[3]\n\n    let markdown = await fs.promises.readFile(markdownSource, \"utf-8\")\n    let markdownParsed = parseMarkdown(markdown)\n\n    await fs.promises.writeFile(markdownSource + \".json\", JSON.stringify(markdownParsed, null, 4), \"utf-8\")\n\n    let documentMeta = DocumentJsonMeta.fromMarkdown(markdownParsed).getSection(\"ispras_templates\")\n    let templateDoc = await new WordDocument().load(resourcesDir + '/isp-reference.docx')\n\n    await generateDocxBody(markdownParsed, templateDoc, documentMeta);\n    substituteTemplates(templateDoc, documentMeta)\n\n    await templateDoc.save(targetPath)\n}\n\nmain().then()"],"names":["XML.getUsedNames","XML.getNamespace","XML.Node","path","XML.Serializable","OXML.normalizePath","XML.Wrapper","OXML.getChildVal","OXML.setChildVal","OXML.getProperXmlnsForDocument","OXML.getRelsPath","OXML.fixXmlns","fs","XML.getTextContents","XML.keys","OXML.buildParagraphWithStyle","OXML.buildLineBreak","OXML.buildTextTag","OXML.buildRawTag","OXML.buildNumPr","OXML.buildSuperscriptTextStyle"],"mappings":"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"}